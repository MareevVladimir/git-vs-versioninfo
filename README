Git - Visual Studio VERSIONINFO Generator
=========================================

Overview
--------
This project uses an MS-DOS batch file to parse the output of git-describe and
generate a header to be included in a project's file version resource.  For
building from source without having git the script can use a version file or
embedded default value.

Usage
-----
This can be run from the command line.  It uses the following arguments:

	usage: [--help] | | [--quiet] [--force] [CACHE PATH] [OUT FILE] [SOFTWARE NAME]

	When called without arguments version information writes to console.

	--help        - displays this output.

	--quiet       - Supress console output.
	--force       - Ignore cached version information.
	CACHE PATH    - Path for non-tracked file to store git-describe version.
	OUT FILE      - Path to writable file that is included in the project's rc file.
	SOFTWARE NAME - Override auto-detected software name

	Version information is expected to be in the format: vMajor[.Minor[.Maint[.Bugfix]]][-stage#][-Patchcount-Committish]
	Where -stage# is alpha, beta, or rc. ( example: v1.0.0-alpha0 )

	Example pre-build event:
	CALL $(SolutionDir)scripts\git-vs-versioninfo.bat "$(SolutionDir)scripts\" "$(ProjectDir)git-vs-versioninfo.cs" "$(SolutionName)"


Notes
-----
Generated definitions:
  - Version
    Terminated string of the git tag minus the leading 'v'.

  - Build
    Full (git) version identifier.

  - PatchCount
	Patches applied since last (tagged) version/release.

  - Committish
    Git committish

  - ReleaseType
    Description of the release (e.g. "Beta Release [n]", "Release Candidate [n]", etc.)
	
  - BuildType
    Description of the build: 
	 "Private Build" when there are changes since the last commit;
	 "Patched Build" when there are commits between the last (tagged) release and the commit being built;
	 "Release Build" when none of the above is true.

  - IsPrivate
    Set when HEAD is dirty.

  - IsPatched
    Set when there are commits between the tag and the commit being built.

  - IsPreRelease
    Set when the tag includes 'alpha', 'beta' or 'rc'.

  - Major/Minor/Maintenance/Bugfix
	Separate Version digits (if unavailable zero is used)

  - Patches{Major/Minor/Maintenance/Bugfix}
	Commits since last (tagged) {Major/Minor/Maintenance/Bugfix} version/release.

  - ProductVersion
    Product version (same as Version, but always in Major.Minor.Maintenance.Bugfix format)

  - TechnicalVersion
	Version in format: Major.Minor.Maintenance.PatchesMaintenance (this can be configured in the script).

  * PluginApi.Version = <n> is being parsed from git tag in the format: plugin-api-v<n>